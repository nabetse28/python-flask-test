[uwsgi]
# -------------
# Settings:
# key = value
# Comments >> #
# -------------

uid = root
gid = root
# wsgi-file = app.py

# socket = [addr:port]
http-socket = 0.0.0.0:5000
# https = 0.0.0.0:8443,/etc/certs/tls.crt,/etc/certs/tls.key

queue = 100

listen = 128


# WSGI module and callable
# module = [wsgi_module_name]:[application_callable_name]
module = app:app

strict = true
master = true
enable-threads = true
vacuum = true                        ; Delete sockets during shutdown
single-interpreter = true
die-on-term = true                   ; Shutdown when receiving SIGTERM (default is respawn)
need-app = true

#disable-logging = false              ; Disable built-in logging 
#logto=/var/log/uwsgi.log
log-4xx = true                       ; but log 4xx's anyway
log-5xx = true                       ; and 5xx's

#harakiri = 60                        ; forcefully kill workers after 60 seconds
#py-callos-afterfork = true           ; allow workers to trap signals

#max-requests = 1000                  ; Restart workers after this many requests
max-worker-lifetime = 3600           ; Restart workers after this many seconds
reload-on-rss = 2048                 ; Restart workers after this much resident memory
worker-reload-mercy = 60             ; How long to wait before forcefully killing workers

cheaper-algo = busyness
processes = 128                      ; Maximum number of workers allowed
cheaper = 8                          ; Minimum number of workers allowed
cheaper-initial = 16                 ; Workers created at startup
cheaper-overload = 1                 ; Length of a cycle in seconds
cheaper-step = 16                    ; How many workers to spawn at a time

cheaper-busyness-multiplier = 30     ; How many cycles to wait before killing workers
cheaper-busyness-min = 20            ; Below this threshold, kill workers (if stable for multiplier cycles)
cheaper-busyness-max = 70            ; Above this threshold, spawn new workers
cheaper-busyness-backlog-alert = 16  ; Spawn emergency workers if more than this many requests are waiting in the queue
cheaper-busyness-backlog-step = 2    ; How many emergency workers to create if there are too many requests in the queue

#buffer-size=20480
#http-timeout=1200000
#socket-timeout=1200000
#http-connect-timeout=1200000